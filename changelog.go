package main

import (
	"bytes"
	"fmt"
	"log/slog"
	"regexp"
	"strings"
	"time"

	"github.com/google/go-github/v66/github"
)

type Config struct {
	Level      int
	Drafts     bool
	Prerelease bool
	Ignore     *regexp.Regexp
	Extract    *regexp.Regexp
}

func (c *Config) filterReleases(rels []*github.RepositoryRelease) []*github.RepositoryRelease {
	i := 0
	for i < len(rels) {
		r := rels[i]
		t := r.GetTagName()
		if (c.Drafts || !r.GetDraft()) &&
			(c.Prerelease || !r.GetPrerelease()) &&
			(c.Ignore == nil || !c.Ignore.MatchString(t)) &&
			(c.Extract == nil || c.Extract.MatchString(t)) {
			i++
		} else {
			slog.Debug("Filtered release due to configuration", "release", r, "tag", t)
			rels = append(rels[:i], rels[i+1:]...)
		}
	}

	return rels
}

// GenerateChangeLog generates changelog text from given project data and configuration.
func GenerateChangeLog(c *Config, p *Project) ([]byte, error) {
	type ref struct {
		label string
		url   string
	}

	var out bytes.Buffer
	rels := c.filterReleases(p.Releases)
	heading := strings.Repeat("#", c.Level)
	url := p.RepoURL()

	slog.Debug("Start generating release notes", "url", url, "config", c)

	linker := NewReflinker(url)
	for _, l := range p.Autolinks {
		linker.AddExtRef(*l.KeyPrefix, *l.URLTemplate, *l.IsAlphanumeric)
	}

	numRels := len(rels)
	refs := make([]ref, 0, numRels)
	for i, rel := range rels {
		prevTag := ""
		if i+1 < numRels {
			prevTag = rels[i+1].GetTagName()
		}

		title := strings.TrimSpace(rel.GetName())
		tag := rel.GetTagName()

		if tag == "" {
			return nil, fmt.Errorf(
				"release %q created at %s is not associated with any tag name. cannot determine a tag name for the release. did you forget setting tag name in the draft release?",
				strings.TrimSpace(rel.GetName()),
				rel.CreatedAt.Format(time.RFC3339),
			)
		}

		var created github.Timestamp
		if rel.GetDraft() {
			created = rel.GetCreatedAt()
		} else {
			created = rel.GetPublishedAt()
		}

		slog.Debug("Generating release", "name", title, "tag", tag, "created", created)

		var compareURL string
		if prevTag == "" {
			compareURL = fmt.Sprintf("%s/tree/%s", url, tag)
		} else {
			compareURL = fmt.Sprintf("%s/compare/%s...%s", url, prevTag, tag)
		}

		fmt.Fprintf(&out, "<a name=\"%s\"></a>\n", tag)

		if title == "" {
			title = tag
		} else if !strings.Contains(title, tag) {
			title = fmt.Sprintf("%s (%s)", title, tag)
		}

		pageURL := fmt.Sprintf("%s/releases/tag/%s", url, tag)
		date := created.Format(time.DateOnly)

		fmt.Fprintf(&out, "%s [%s](%s) - %s\n\n", heading, title, pageURL, date)
		fmt.Fprint(&out, linker.Link(strings.Replace(rel.GetBody(), "\r", "", -1)))
		fmt.Fprintf(&out, "\n\n[Changes][%s]\n\n\n", tag)

		refs = append(refs, ref{tag, compareURL})

		slog.Debug("Generated release", "title", title, "page", pageURL, "date", date)
	}

	slog.Debug("Generate release links", "links", len(refs))
	for _, r := range refs {
		fmt.Fprintf(&out, "[%s]: %s\n", r.label, r.url)
	}

	fmt.Fprintf(&out, "\n<!-- Generated by https://github.com/rhysd/changelog-from-release %s -->\n", version)

	slog.Debug("Finish to generate release notes", "url", url)

	return out.Bytes(), nil
}
